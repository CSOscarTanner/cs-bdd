#!/usr/bin/env ruby

require 'thor'
require 'thor/group'
require 'i18n'
require 'gherkin' # Used here as a translation source
require 'json'
require 'yaml'
require 'highline'

require File.join(File.dirname(__FILE__), 'cs-bdd-helpers')
require_relative '../lib/cs/bdd/version'

module CS
  module BDD
    class Runner < Thor
      desc 'ios [IP_ADDRESS] [PROFILE]',
           'Run tests in IOS.'
      option  :tags,
              :desc => 'Only execute the features or scenarios with tags matching TAG_EXPRESSION.',
              :aliases => '-t',
              :banner => 'TAG_EXPRESSION'
      option  :port,
              :desc => 'Port number to proxy connect.',
              :banner => 'NUMBER',
              :default => '37265'
      option  :device,
              :desc => 'UUID to device install app.',
              :banner => 'UUID'
              
      def ios(ip_address, profile = nil)
        @cli.say("Loading...") if not in_root_project_folder?
        
        profile ||= answer_profile
        options[:device] ||= answer_device_ios
        
        if !profile_exist? (profile)
          @cli.say("Profile inválid.")
          profile = answer_profile
        end
        configs = profile_configs[profile]
        
        command = "APP_BUNDLE_PATH='#{configs["export_path"]}/#{configs["scheme"]}.app'"
        command += " PROJECT_DIR='#{project_folder_by_xcworkspace(configs["xcworkspace"])}'"
        command += " DEVICET=#{options[:device]}"
        command += " DEVICE_ENDPOINT=http://#{ip_address}:#{options[:port]}"
        command += " bundle exec cucumber -p ios"
        command += " -t #{options[:tags]}" if options[:tags]
        
        @cli.say("\nRunning command:\n")
        @cli.say("#{command.colorize(:light_blue)}\n\n")
        exec(command)
      end
      
      desc 'android [APK]',
           'Run tests in Android.'
      option  :tags,
              :desc => 'Only execute the features or scenarios with tags matching TAG_EXPRESSION.',
              :aliases => '-t',
              :banner => 'TAG_EXPRESSION'
              
      def android(apk)
        @cli.say("Loading...") if not in_root_project_folder?
        command = "bundle exec calabash-android run '#{apk}' -p android"
        command += " -t #{options[:tags]}" if options[:tags]
        
        @cli.say("\nRunning command:\n")
        @cli.say("#{command.colorize(:light_blue)}\n\n")
        exec(command)
      end
      
      def initialize(*args)
        super        
        # Load CLI
        @cli = HighLine.new
      end
    end
  end
end

module CS
  module BDD
    class Build < Thor
      desc 'ios [PROFILE]',
           'Build project in IOS.'
      option  :device,
              :desc => 'UUID to device install app.',
              :banner => 'UUID'
              
      def ios(profile = nil)
        @cli.say("Loading...") if #!in_root_project_folder?
        
        profile ||= answer_profile
        
        if !profile_exist? (profile)
          @cli.say("Profile inválid.")
          profile = answer_profile
        end
        configs = profile_configs[profile]
        
        command = "APP_BUNDLE_PATH='#{configs["export_path"]}/#{configs["scheme"]}.app'"
        command += " PROJECT_DIR='#{project_folder_by_xcworkspace(configs["xcworkspace"])}'"
        command += " DEVICET=#{options[:device]}"
        command += " DEVICE_ENDPOINT=http://#{ip_address}:#{options[:port]}"
        command += " bundle exec cucumber -p ios"
        command += " -t #{options[:tags]}" if options[:tags]
        
        @cli.say("Running command:\n")
        @cli.say("#{command.colorize(:blue)}\n\n")
        
        exec(command)
      end
      
      def initialize(*args)
        super        
        # Load CLI
        @cli = HighLine.new
      end
    end
  end
end

module CS
  module BDD
    # Definition of the generators groups
    class CsBddRunner < Thor
      include Thor::Actions

      map '-v' => :version
      map '--version' => :version

      register CS::BDD::Generate, 'generate',
               'generate [GENERATOR] [RESOURCE_NAME]',
               'Generates various resources'
      register CS::BDD::Generate, 'g',
               'g [GENERATOR] [RESOURCE_NAME]',
               'Generates various resources'
      register CS::BDD::Runner, 'runner',
              'run [PLATFORM]',
              'Run tests in Android or iOS'

      desc 'new PROJECT_NAME',
           'Generates the structure of a new project that uses '\
           'Calabash in both Android and iOS apps'
      option :lang,
             banner: 'any of the gherkin supported languages',
             default: :en
      def new(name)
        I18n.config.default_locale = options[:lang]
        # Thor will be responsible to look for identical
        # files and possibles conflicts
        directory File.join(File.dirname(__FILE__),
                            '..', 'lib', 'skeleton'), name

        # Copying base steps file with localization
        template('base_steps', File.join(name, 'features', 'step_definitions',
                                         'base_steps.rb'))

        # Copying android screen base file with localization
        template('android_screen_base', File.join(name, 'features', 'android',
                                                  'android_screen_base.rb'))

        # Copying ios screen base file with localization
        template('ios_screen_base',
                 File.join(name, 'features', 'ios', 'ios_screen_base.rb'))
      end

      desc 'version', 'Shows the gem version'
      def version
        puts "cs-bdd Version #{CS::BDD::VERSION}"
      end

      def self.source_root
        File.join(File.dirname(__FILE__), '..', 'lib', 'templates')
      end

      # Overriding the initialize method to load all the
      # translations supported by the gem gherkin
      def initialize(*args)
        super
        # Loading gherkin accepted translations
        translations_file_path = File.join(
          Gem.loaded_specs['gherkin'].full_gem_path,
          'lib',
          'gherkin',
          'i18n.json'
        )
        # Parsing the JSON file
        # Removing the sequence *| and all the alternative
        # options for the gherkin translations
        translations_json = JSON.parse(
          File.read(translations_file_path)
          .gsub(/\*\|/, '')
          .gsub(/\|.*\"/, '"'))
        # Converting the translations to YAML and storing in a temp file
        translations_temp_file = Tempfile.new(['translations', '.yml'])
        File.write(translations_temp_file, translations_json.to_yaml)
        # Loading the translations from gherkin and from the
        # locales folder of this gem
        locales_folder_path = File.join(
          File.dirname(__FILE__),
          '..', 'lib', 'cs', 'bdd', 'locales'
        )
        I18n.load_path = Dir[
          translations_temp_file,
          File.join(locales_folder_path, '*.yml')
        ]
        I18n.backend.load_translations
        I18n.config.enforce_available_locales = true
        
        # Load Colorize
        require 'colorize'
      end
    end
  end
end

CS::BDD::CsBddRunner.start