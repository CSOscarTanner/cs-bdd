#!/usr/bin/env ruby

require 'thor'

require File.join(File.dirname(__FILE__), "cs-bdd-helpers")
require_relative '../lib/cs/bdd/version'

class CsBddRunner < Thor
  include Thor::Actions

  # @steps_dir = File.join(@features_dir, "step_definitions" )
  # @android_dir = File.join(@features_dir, "android" )
  # @ios_dir = File.join(@features_dir, "ios" )

  default_task :help

  desc "name", "The name of the project or feature"

  desc "new PROJECT_NAME", "Generates the structure of a new project that uses Calabash in both Android and iOS apps"
  def new name
    if name.empty?
      puts "Please specify the project name"
      exit 1
    else
      # Thor will be responsible to look for identical files and possibles conflicts
      directory File.join( File.dirname(__FILE__), '..', 'lib', 'skeleton' ), name
    end
  end

  desc "generate GENERATOR, RESOURCE_NAME", "Generates a specific resource based on the given generator."
  def generate generator, name

    # Looks if the user is in the root folder of the project
    unless Dir.exists? File.join(FileUtils.pwd, "features", "android", "features")
      puts "Please run this command on the root folder of the project"
      exit 1
    end

    case generator
    when 'feature'
      
      create_feature_file name
      create_steps_file name
      create_screen_file name, 'Android'
      create_screen_file name, 'IOS'
    when 'aFeature'
      create_feature_file name, 'Android'
      create_steps_file name, 'Android'
      create_screen_file name, 'Android'
    when 'iFeature'
      create_feature_file name, 'IOS'
      create_steps_file name, 'IOS'
      create_screen_file name, 'IOS'
    when 'step'
      create_steps_file name
    when 'aStep'
      create_steps_file name, 'Android'
    when 'iStep'
      create_steps_file name, 'IOS'
    when 'aScreen'
      create_screen_file name, 'Android'
    when 'iScreen'
      create_screen_file name, 'IOS'
    end
  end

  desc "version", "Shows the gem version"
  def version
    puts "cs-bdd Version #{CS::BDD::VERSION}"
  end

  def self.source_root
    File.join( File.dirname(__FILE__), '..', 'lib', 'templates' )
  end
end

CsBddRunner.start