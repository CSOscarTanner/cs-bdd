require 'calabash-android/abase'

class AndroidScreenBase < Calabash::ABase
  def self.element(element_name, &block)
    define_method(element_name.to_s, *block)
  end

  class << self
    alias_method :value, :element
    alias_method :action, :element
    alias_method :trait, :element
  end

  def restart_app
    shutdown_test_server
    start_test_server_in_background
  end

  def <%= I18n.translate( "screen_base.method_missing" ) %> (method, *args)
    if method.to_s.<%= I18n.translate "screen_base.start_with?" %>('<%= I18n.translate "screen_base.touch_" %>')
      # <%= I18n.translate( "comments.method_missing_1" ) %>
      # <%= I18n.translate( "comments.method_missing_2" ) %>
      # <%= I18n.translate( "comments.method_missing_3" ) %>
      <%= I18n.translate( "screen_base.touch_screen_element" ) %> public_send(method.to_s.sub('<%= I18n.translate"screen_base.touch_" %>', ''))
    elsif method.to_s.<%= I18n.translate "screen_base.start_with?" %>('enter_')
      # <%= I18n.translate( "comments.starts_enter_1" ) %>
      # <%= I18n.translate( "comments.starts_enter_2" ) %>
      # <%= I18n.translate( "comments.starts_enter_3" ) %>
      enter args[0], public_send("#{method.to_s.sub('enter_', '')}_field")
    elsif method.to_s.<%= I18n.translate "screen_base.end_with?" %>('<%= I18n.translate "screen_base._visible?" %>')
      # <%= I18n.translate( "comments.termina_com_visible_1" ) %>
      # <%= I18n.translate( "comments.termina_com_visible_2" ) %>
      # <%= I18n.translate( "comments.termina_com_visible_3" ) %>
      <%= I18n.translate( "screen_base.visible?" ) %> public_send(method.to_s.sub('<%= I18n.translate "screen_base._visible?" %>', ''))
    elsif method.to_s.<%= I18n.translate "screen_base.end_with?" %>('<%= I18n.translate "screen_base._visible!" %>')
      # <%= I18n.translate( "comments.termina_com_visible_4" ) %>
      # <%= I18n.translate( "comments.termina_com_visible_5" ) %>
      <%= I18n.translate( "screen_base.field_name" ) %> = method.to_s.sub('<%= I18n.translate "screen_base._visible!" %>', '')
                         .sub('_field', '')
                         .sub('_', ' ')
                         .capitalize
      raise ElementNotFoundError, "ID: #{field_name}" unless
        <%= I18n.translate( "screen_base._visible?" ) %> public_send(method.to_s.sub('<%= I18n.translate "screen_base._visible!" %>', ''))
    else
      super(method, args)
    end
  end

  def <%= I18n.translate( "screen_base._visible?" ) %>(id, query = nil)
    query = "* id:'#{id}'" if query.nil?
    begin
      wait_for(timeout: 3) { element_exists query }
    rescue
      return false
    end
    true
  end

  element(:loading_screen)      { 'insert_loading_view_id' }

  # <%= I18n.translate( "comments.wait_for_progress" ) %>
  def <%= I18n.translate( "screen_base.wait_for_progress" ) %>
    sleep(2)
    <%= I18n.translate( "screen_base.wait_for_element_does_not_exist" ) %>("* id:'#{loading_screen}'",
                                    timeout: 10)
  end

  def <%= I18n.translate( "screen_base.drag_to" ) %>(direction)
    positions = [0, 0, 0, 0] # [ 'from_x', 'to_x', 'from_y', 'to_y' ]

    case(direction)
    when :<%= (I18n.translate "directions.down").to_sym %>
      positions = [30,30,60,30]
    when :<%= (I18n.translate "directions.up").to_sym %>
      positions = [80,80,60,90]
    when :<%= (I18n.translate "directions.left").to_sym %>
      positions = [90,20,80,80]
    when :<%= (I18n.translate "directions.right").to_sym %>
      positions = [20,90,80,80]
    else
      raise 'Direction not known!'
    end

    # perform_action( 'action', 'from_x', 'to_x', 'from_y', 'to_y',
    # 'number of steps (in this case, velocity of drag' )
    perform_action('drag', positions[0], positions[1],
                   positions[2], positions[3], 15)
    sleep(1)
  end

  def <%= I18n.translate( "screen_base.drag_until_element_is_visible_with_special_query" ) %>(direction, element)
    <%= I18n.translate( "screen_base.drag_until_element_is_visible" ) %>, element,
                                  "* {text CONTAINS[c] '#{element}'}"
  end

  def <%= I18n.translate( "screen_base.drag_until_element_is_visible" ) %>(direction, element, query = nil, limit = 15)
    i = 0

    element_query = ''
    if query.nil?
      element_query = "* marked:'#{element}'"
    else
      element_query = query
    end

    sleep(2)
    while !element_exists(element_query) && i < limit
      <%= I18n.translate( "screen_base.drag_to" ) %> direction
      i += 1
    end

    fail "Executed #{limit} moviments #{direction} and "\
          "the element '#{element}' was not found on this view!" unless
      i < limit
  end

  def <%= I18n.translate( "screen_base.drag_for_specified_number_of_times ") %>(direction, times)
    times.times do
      <%= I18n.translate( "screen_base.drag_to" ) %> direction
    end
  end

  # <%= I18n.translate( "comments.is_on_page_1" ) %>
  # <%= I18n.translate( "comments.is_on_page_2" ) %>
  def <%= I18n.translate( "screen_base.is_on_page?" ) %>(page_text, negation = '')
  fail 'Error! Invalid query string!' if
       page_text.to_s == ''

    should_not_have_exception = false
    should_have_exception = false
    begin
      wait_for(timeout: 5) { has_text? page_text }
      # <%= I18n.translate( "comments.is_on_page_3" ) %>
      # <%= I18n.translate("comments.is_on_page_4" ) %>
      should_not_have_exception = true unless negation == ''
    rescue
      # <%= I18n.translate( "comments.is_on_page_5" ) %>
      # <%= I18n.translate( "comments.is_on_page_6" ) %>
      should_have_exception = true if negation == ''
    end

    fail "<%= I18n.translate( "exceptions.unexpected_page" ) %>: '#{page_text}'" if
      should_not_have_exception

    fail "<%= I18n.translate( "exceptions.unexpected_page_expected_was" ) %>: '#{page_text}'" if
      should_have_exception
  end

  def enter(text, element, query = nil)
    if query.nil?
      query("* marked:'#{element}'", setText: text.to_s)
    else
      query(query, setText: text.to_s)
    end
  end

  def <%= I18n.translate( "screen_base.touch_screen_element" ) %>(element, query = nil)
    query = "* id:'#{element}'" if query.nil?
    begin
      wait_for(timeout: 5) { element_exists(query) }
      touch(query)
    rescue => e
      raise "<%= I18n.translate( "exceptions.problem_in_touch_screen" ) %>: '#{element}'\nError Message: #{e.message}"
    end
  end

  def <%= I18n.translate( "screen_base.touch_element_by_index" ) %>(id, index)
    wait_for(timeout: 5) { element_exists("* id:'#{id}' index:#{index}") }
    touch("* id:'#{id}' index:#{index}")
  end

  def <%= I18n.translate( "screen_base.clear_text_field" ) %>(field)
    <%= I18n.translate( "screen_base.clear_text_in" ) %>("android.widget.EditText id:'#{field}'}")
  end

  def <%= I18n.translate( "screen_base.select_date_on_date_picker" ) %>(date, date_picker_field_id)
    # <%= I18n.translate( "comments.select_date_1" ) %>
    touch "* id:'#{date_picker_field_id}'"

    # <%= I18n.translate( "comments.select_date_2" ) %>
    set_date 'DatePicker', date.year, date.month, date.day

    # <%= I18n.translate( "comments.select_date_2" ) %>
    touch "* id:'button1'"
  end
end
